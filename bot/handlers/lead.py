from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from bot.states.user_states import LeadForm
from bot.keyboards.reply import get_confirm_keyboard, get_main_keyboard
from bot.utils.validators import validate_phone, validate_name
from bot.utils.anti_spam import is_spam, get_remaining_requests
from bot.utils.logger import get_logger
from data.database import save_lead
from bot.config import ADMIN_IDS

router = Router()
logger = get_logger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
MAX_NAME_LENGTH = 50
MAX_PHONE_LENGTH = 20
MAX_MESSAGE_LENGTH = 500

def clean_text(text: str) -> str:
    """–û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç –Ω–µ–ø–µ—á–∞—Ç–∞–µ–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
    if not text:
        return ""
    return ''.join(char for char in text if char.isprintable()).strip()

@router.message(F.text == "–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É")
async def start_lead(message: Message, state: FSMContext):
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–∞–º
    if is_spam(user_id):
        remaining = get_remaining_requests(user_id)
        await message.answer(
            f"‚ö†Ô∏è –í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞—è–≤–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ —á–∞—Å.\n"
            f"–û—Å—Ç–∞–ª–æ—Å—å –∑–∞–ø—Ä–æ—Å–æ–≤: {remaining}"
        )
        logger.warning(f"–°–ø–∞–º-–∑–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ
    current_state = await state.get_state()
    if current_state is not None:
        await message.answer("‚ö†Ô∏è –í—ã —É–∂–µ –æ—Å—Ç–∞–≤–ª—è–µ—Ç–µ –∑–∞—è–≤–∫—É. –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
        return
    
    await state.set_state(LeadForm.name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:", reply_markup=None)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞—á–∞–ª –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏")

@router.message(F.text == "/cancel")
async def cancel_form(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        await message.answer("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Ñ–æ—Ä–º—ã –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
        return
    await state.clear()
    await message.answer("‚ùå –§–æ—Ä–º–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=get_main_keyboard())
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ—Ç–º–µ–Ω–∏–ª —Ñ–æ—Ä–º—É")

@router.message(LeadForm.name)
async def process_name(message: Message, state: FSMContext):
    # –ó–∞—â–∏—Ç–∞ –æ—Ç –º–µ–¥–∏–∞
    if not message.text:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –∏–º—è.")
        return
    
    # –û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
    cleaned_text = clean_text(message.text)
    if not cleaned_text:
        await message.answer("‚ö†Ô∏è –í–≤–µ–¥—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã
    if len(cleaned_text) > MAX_NAME_LENGTH:
        await message.answer(f"‚ö†Ô∏è –ò–º—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º {MAX_NAME_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤.")
        return
    
    if not validate_name(cleaned_text):
        await message.answer("‚ö†Ô∏è –ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã 2 –±—É–∫–≤—ã –∏ –Ω–µ —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä.")
        return
    
    await state.update_data(name=cleaned_text)
    await state.set_state(LeadForm.phone)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")

@router.message(LeadForm.phone)
async def process_phone(message: Message, state: FSMContext):
    # –ó–∞—â–∏—Ç–∞ –æ—Ç –º–µ–¥–∏–∞
    if not message.text:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
        return
        
    # –û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
    cleaned_text = clean_text(message.text)
    if not cleaned_text:
        await message.answer("‚ö†Ô∏è –í–≤–µ–¥—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã
    if len(cleaned_text) > MAX_PHONE_LENGTH:
        await message.answer(f"‚ö†Ô∏è –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ú–∞–∫—Å–∏–º—É–º {MAX_PHONE_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤.")
        return
        
    if not validate_phone(cleaned_text):
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: +7XXXXXXXXXX –∏–ª–∏ 8XXXXXXXXXX")
        return
    await state.update_data(phone=cleaned_text)
    await state.set_state(LeadForm.message)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ:")

@router.message(LeadForm.message)
async def process_message(message: Message, state: FSMContext):
    # –ó–∞—â–∏—Ç–∞ –æ—Ç –º–µ–¥–∏–∞
    if not message.text:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return
        
    # –û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
    cleaned_text = clean_text(message.text)
    if not cleaned_text:
        await message.answer("‚ö†Ô∏è –í–≤–µ–¥—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã
    if len(cleaned_text) > MAX_MESSAGE_LENGTH:
        await message.answer(f"‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º {MAX_MESSAGE_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤.")
        return
        
    if len(cleaned_text) < 5:
        await message.answer("‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã 5 —Å–∏–º–≤–æ–ª–æ–≤.")
        return
    await state.update_data(message=cleaned_text)
    data = await state.get_data()
    summary = f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏:\n\n–ò–º—è: {data['name']}\n–¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n–°–æ–æ–±—â–µ–Ω–∏–µ: {data['message']}"
    await message.answer(summary, reply_markup=get_confirm_keyboard())
    await state.set_state(LeadForm.confirm)
    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥, —á—Ç–æ –∑–∞—è–≤–∫–∞ –µ—â—ë –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞
    await state.update_data(submitted=False)

@router.callback_query(LeadForm.confirm)
async def handle_confirmation(callback: CallbackQuery, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ callback.data —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if not callback.data:
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏.")
        return
        
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ callback'–∞
    if callback.message is None:
        await callback.answer("‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å—Ç–∞—Ä–µ–ª–æ.")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ - —Ç–æ–ª—å–∫–æ —Ç–æ—Ç –∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if callback.from_user.id != callback.message.chat.id:
        await callback.answer("‚ö†Ô∏è –≠—Ç–æ –Ω–µ –≤–∞—à–∞ —Ñ–æ—Ä–º–∞.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    user_id = callback.from_user.id
    
    if callback.data == "confirm":
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ –±—ã–ª–∞ –ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞
        if data.get('submitted', False):
            await callback.answer("‚ö†Ô∏è –ó–∞—è–≤–∫–∞ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.")
            return
            
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ—Ç–ø—Ä–∞–≤–∫–∏
        await state.update_data(submitted=True)
            
        success = save_lead(data['name'], data['phone'], data['message'])
        if success:
            try:
                await callback.message.edit_text("‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ.")
                # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
                notification = f"üì¨ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!\n\n–ò–º—è: {data['name']}\n–¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n–°–æ–æ–±—â–µ–Ω–∏–µ: {data['message']}"
                for admin_id in ADMIN_IDS:
                    try:
                        await callback.bot.send_message(admin_id, notification)
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin_id}: {e}")
                logger.info(f"–ó–∞—è–≤–∫–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                try:
                    await callback.message.answer("‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º.")
                except:
                    pass
        else:
            try:
                await callback.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            except:
                await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        await state.clear()
        
    elif callback.data == "cancel":
        await state.clear()
        try:
            await callback.message.edit_text("‚ùå –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=get_main_keyboard())
        except:
            await callback.message.answer("‚ùå –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=get_main_keyboard())
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–º–µ–Ω–∏–ª –∑–∞—è–≤–∫—É")
    
    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "–∫—Ä—É—Ç—è—â–∏–π—Å—è" –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
    try:
        await callback.answer()
    except:
        pass